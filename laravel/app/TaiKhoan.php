<?php
namespace App;

use Illuminate\Auth\Authenticatable;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContracts;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Config;
use App\Services\Library;
use Zizaco\Entrust\Traits\EntrustUserTrait;

class TaiKhoan extends BaseModel implements AuthenticatableContracts
{
    use Authenticatable;
    use EntrustUserTrait { restore as private restoreA; }
    use SoftDeletes { restore as private restoreB; }

    /**
     * Fix Trail
     */
    public function restore()
    {
        $this->restoreA();
        $this->restoreB();
    }

    /**
     * @var bool
     */
    public $incrementing = false;
    /**
     * @var array
     */
    protected $fillable = [
        'loai_tai_khoan',
        'trang_thai',
        'gioi_tinh',
        'ten_thanh',
        'ho_va_ten',
        'ngay_sinh',
        'ngay_rua_toi',
        'ngay_ruoc_le',
        'ngay_them_suc',
        'email',
        'dien_thoai',
        'dia_chi',
        'ghi_chu',
        'giao_ho',
    ];
    /**
     * @var array
     */
    public static $loaiTaiKhoan = [
        'THIEU_NHI',
        'HUYNH_TRUONG',
        'SOEUR',
        'LINH_MUC',
    ];
    /**
     * @var array
     */
    public static $loaiTrangThai = [
        'HOAT_DONG',
        'TAM_NGUNG',
    ];

    /**
     * @param array $attributes
     */
    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        self::setTable('tai_khoan');
        $this->setHidden(['mat_khau', 'remember_token']);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function lop_hoc()
    {
        return $this->belongsToMany(LopHoc::class, 'taikhoan_lophoc', 'tai_khoan_id', 'lop_hoc_id')
            ->orderBy('khoa_hoc_id', 'DESC')
            ->withPivot('chuyen_can', 'hoc_luc', 'xep_hang', 'ghi_chu', 'tai_khoan_cap_nhat');
    }

    public function roles()
    {
        return $this->belongsToMany(Config::get('entrust.role'), Config::get('entrust.role_user_table'));
    }

    public function nhom_tai_khoan()
    {
        return $this->roles();
    }

    /**
     * Get the password for the user.
     * @return string
     */
    public function getAuthPassword()
    {
        return $this->mat_khau;
    }

    public function beforeSave()
    {
        parent::beforeSave(); // TODO: Change the autogenerated stub
        // Update Ten
        $ten = explode(' ', trim($this->ho_va_ten));
        $this->ten = end($ten);
    }

    /**
     * @param $query
     */
    public function scopeLocDuLieu($query)
    {
        if ($arrID = \Request::get('id')) {
            if (is_array($arrID)) {
                $query->whereIn('id', $arrID);
            } else {
                $query->where('id', 'like', '%' . $arrID . '%');
            }
        }
        if ($arrID = \Request::get('loai_tai_khoan')) {
            $arrID = explode(',', $arrID);
            if (count($arrID) != 1) {
                $query->whereIn('loai_tai_khoan', $arrID);
            } else {
                $query->where('loai_tai_khoan', array_shift($arrID));
            }
        }
        if ($q = \Request::get('trang_thai')) { $query->where('tai_khoan.trang_thai', $q); }
        if ($q = \Request::get('ho_va_ten')) { $query->where('ho_va_ten', 'like', '%' . $q . '%'); }

        if ($q = \Request::get('ngay_sinh_tu')) { $query->where('ngay_sinh', '>=', $q); }
        if ($q = \Request::get('ngay_sinh_den')) { $query->where('ngay_sinh', '<=', $q); }
        if ($q = \Request::get('ngay_tao_tu')) { $query->where('created_at', '>=', $q); }
        if ($q = \Request::get('ngay_tao_den')) { $query->where('created_at', '<=', $q); }

        $khoa = \Request::get('khoa');
        $nganh = \Request::get('nganh');
        $cap = \Request::get('cap');
        $doi = \Request::get('doi');
        if ($khoa || $nganh || $cap || $doi) {
            $query->whereHas('lop_hoc', function ($query) use ($khoa, $nganh, $cap, $doi) {
                if ($khoa) {
                    $query->where('khoa_hoc_id', $khoa);
                }
                if ($nganh) {
                    $query->where('nganh', $nganh);
                }
                if ($cap) {
                    $query->where('cap', $cap);
                }
                if ($doi) {
                    $query->where('doi', $doi);
                }
            });
        }

        if ($chuaXepLop = \Request::get('chua_xep_lop')) {
            $query->whereDoesntHave('lop_hoc', function ($query) use ($chuaXepLop) {
                $query->where('khoa_hoc_id', $chuaXepLop);
            });
        }
    }

    /**
     * Lấy danh sách được phân quyền cho tài khoản hiện tại
     */
    public function getPhanQuyen($arrOptions = null)
    {
        $arrPerms = [];
        foreach ($this->nhom_tai_khoan()->get() as $nhom) {
            $arrPerms = array_merge($arrPerms, $nhom->perms()->pluck('ten')->toArray());
        }

        return $arrPerms;
    }

    /**
     * @param $loaiTaiKhoan
     * @return string
     */
    private function generatePreKey($loaiTaiKhoan, $khoaHocID)
    {
        if (in_array($loaiTaiKhoan, self::$loaiTaiKhoan) && $loaiTaiKhoan != 'THIEU_NHI') {
            $arrTmp = explode('_', $loaiTaiKhoan);
            if (count($arrTmp) > 1) {
                return substr($arrTmp[0], 0, 1) . substr($arrTmp[1], 0, 1);
            } else {
                return substr($arrTmp[0], 0, 1) . substr($arrTmp[0], -1, 1);
            }
        } else {
            if (!$khoaHocID) {
                $khoaHocID = KhoaHoc::hienTaiHoacTaoMoi()->id;
            }
            return substr($khoaHocID, -2);
        }
    }

    /**
     * @param null $loaiTaiKhoan
     * @return int|string
     */
    private function taoID($loaiTaiKhoan, $khoaHocID = null)
    {
        $sNewID = $this->generatePreKey($loaiTaiKhoan, $khoaHocID);
        $iCountID = self::where('id', 'like', "$sNewID%")->max('id');
        $iCountID = $iCountID ? (int)substr($iCountID, -3) : 0;
        ++$iCountID;
        $sNewID .= strlen($iCountID) < 3 ? str_repeat(0, 3 - strlen($iCountID)) . $iCountID : $iCountID;

        return $sNewID;
    }

    /**
     * @param $arrAttribute
     * @return TaiKhoan
     */
    public static function taoTaiKhoan($arrAttribute)
    {
        $arrAttribute = array_merge([
            'loai_tai_khoan' => 'THIEU_NHI',
            'ho_va_ten'      => 'Họ và Tên',
        ], $arrAttribute);
        $taiKhoan = new self($arrAttribute);
        $taiKhoan->trang_thai = 'HOAT_DONG';
        $taiKhoan->id = $taiKhoan->taoID($taiKhoan->loai_tai_khoan);
        $taiKhoan->capNhatMatKhau($taiKhoan->id);
        if (!$taiKhoan->save()) {
            abort(500);
        }

        return $taiKhoan;
    }

    /**
     * @param $matKhau
     */
    public function capNhatMatKhau($matKhau)
    {
        if (env('APP_ENV') == 'dev') {
            $matKhau = 123456;
        }
        $this->mat_khau = bcrypt($matKhau);
    }

    // /**
    //  * Duoc phep cap nhat diem vao ngay Chua Nhat, Thu 2, Thu 3.
    //  * @param int $ngungDiemDanh
    //  * @return array
    //  */
    // private function kiemtraNgayDiemDanh($ngungDiemDanh = 3)
    // {
    //     $endDate = time();
    //     $ngayDacBiet = strtotime("-$ngungDiemDanh day", $endDate);
    //     $weekdayNumber = 0; // Ngay Chua Nhat = 0;
    //     do {
    //         $ngayDacBiet += (24 * 3600);
    //     } while (date('w', $ngayDacBiet) != $weekdayNumber);

    //     return $ngayDacBiet <= $endDate ? date('Y-m-d', $ngayDacBiet) : false;
    // }
}
